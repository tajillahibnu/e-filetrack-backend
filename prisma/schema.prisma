generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  users       User[]
  roleMenu    RoleMenu[]
  permissions RolePermission[]
}

model Permission {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  roles       RolePermission[]
}

model RolePermission {
  id           Int           @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model Menu {
  id       Int           @id @default(autoincrement())
  name     String
  path     String        @unique
  roleMenu RoleMenu[]
}

model RoleMenu {
  id     Int           @id @default(autoincrement())
  roleId Int
  menuId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
}


model User {
  id          Int      @id @default(autoincrement()) // Auto-increment untuk integer
  name        String
  username    String   @unique
  email       String   @unique
  password    String? 
  roleId   Int
  role     Role    @relation(fields: [roleId], references: [id])
  refreshToken String?  // Tambahkan kolom ini (opsional, bisa null)
  createdAt    DateTime @default(now())
  lastLogin    DateTime?  // ⬅️ Untuk mencatat waktu login terakhir
  lastAction   DateTime?  // ⬅️ Untuk mencatat aksi terakhir user
  logs     UserLog[]
}

model UserLog {
  id        Int      @id @default(autoincrement()) // ID Auto-increment
  userId    Int      // Ubah ke Int agar cocok dengan User.id
  endpoint  String
  method    String
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KategoriDokumen {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime? // NULL jika belum dihapus (soft delete)
}
